module.exports = {
    codesErrors: {
        '404': 'Пользователь запросил ресурс, который не существует.',
        '101':	'Пользователь не предоставил ключ доступа.',
        '101':	'Пользователь предоставил неверный ключ доступа.',
        '102':	'Учетная запись пользователя неактивна или заблокирована.',
        '103':	'Пользователь запросил несуществующую функцию API.',
        '104':	'Пользователь выполнил ежемесячную норму запроса по своей подписке.',
        '105':	'Текущая подписка пользователя не поддерживает эту функцию API.',
        '105':	'Текущий план подписки пользователя не поддерживает HTTPS.',
        '601':	'Было указано недопустимое (или отсутствующее) значение запроса.',
        '602':	'Запрос API не вернул никаких результатов.',
        '603':	'Архивные данные не поддерживаются текущим планом подписки.',
        '604':	'Массовые запросы не поддерживаются в текущем плане подписки.',
        '605':	'Был указан недопустимый код языка.',
        '606':	'Было указано недопустимое значение единицы измерения.',
        '607':	'Было указано недопустимое значение интервала.',
        '608':	'Было указано недопустимое значение дней прогноза.',
        '609':	'Данные прогноза погоды не поддерживаются в текущем плане подписки.',
        '611':	'Была указана неверная историческая дата.',
        '612':	'Были указаны недопустимые исторические временные рамки.',
        '613':	'Указанные исторические временные рамки слишком велики. (Максимум: 60 дней)',
        '614':	'Была указана неверная историческая дата.',
        '615':	'Сбой запроса API.'
    },
    requestParameters: {
        access_key: '[Требуется] Ваш ключ доступа к API, который можно найти на панели управления acccount.',
        query: '[Требуется] Укажите город или нескольких городов(доступно в Профессиональный план и выше), разделенных точкой с запятой на английском языке',
        units: '[Необязательно] Используйте этот параметр для передачи одного из идентификаторов объекта из API:\n' +
            '\tm - для метрических значений\n' +
            '\ts - для научных\n' +
            '\tf - для градусов по Фаренгейту',
        language: '[Необязательно] Используйте этот параметр, чтобы указать предпочитаемый вами язык ответа API, используя его ISO-код. (По умолчанию: не задано, английский)',
        callback: '[Необязательно] Используйте этот параметр, чтобы указать имя функции обратного вызова JSONP, в которую будет заключен ваш ответ API.',
        historical_date: '[Требуется] Используйте этот параметр для передачи API одной исторической даты или нескольких дат, разделенных точкой с запятой. (Пример: 2015-01-21 для одной даты или 2015-01-21;2015-01-22 для нескольких дат)',
        historical_date_start: '[Требуется] Используйте этот параметр, чтобы передать дату начала для текущего запроса исторических временных рядов.',
        historical_date_end: '[Требуется] Используйте этот параметр, чтобы передать дату окончания для текущего запроса исторических временных рядов.',
        hourly: '[Необязательно] Установите для этого параметра значение 1 (включено) или 0 (выключено) в зависимости от того, хотите ли вы, чтобы API возвращал данные о погоде с разбивкой по часам. (По умолчанию: 0 - выкл.)',
        interval: '[Необязательно] Если включены почасовые данные, используйте этот параметр для определения интервала:\n' +
            '\t<1> час\n' +
            '\t<3> часа в сутки (по умолчанию)\n' +
            '\t<6> часов в час\n' +
            '\t<12> часов в час (день/ночь)\n' +
            '\t<24> часа в сутки (в среднем за день)',
        forecast_days: '[Необязательно] Используйте этот параметр, чтобы указать количество дней, за которые API возвращает прогнозные данные. (По умолчанию: 7 или 14 дней, в зависимости от вашей подписки)'
    },
    displaySettings: {
        m: {
            unitTemp: 'C',
            unitWindSpeed: 'м/с',
            unitPressure: 'мм рт.ст.',
            windSpeed: val => Math.round(val / 3.6 * 10) /10,
            pressure: val => Math.round(val * 0.750063755419211)
        },
        s: {
            unitTemp: 'K',
            unitWindSpeed: 'Km/h',
            unitPressure: 'MB',
            windSpeed: val => val,
            pressure: val => val
        },
        f: {
            unitTemp: 'F',
            unitWindSpeed: 'mph',
            unitPressure: 'MB',
            windSpeed: val => val,
            pressure: val => val
        }
    }
}